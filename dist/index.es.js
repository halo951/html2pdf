/** 
 * html2pdf-browser@1.0.1
 * 
 * Copyright (c) 2024 halo951 <https://github.com/halo951>
 * Released under MIT License
 * 
 * @author halo951(https://github.com/halo951)
 * @license MIT
 */
import e from"jspdf";import t from"html2canvas";var n=function(){return n=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)};function r(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}u((r=r.apply(e,t||[])).next())}))}function o(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){a.label=l[1];break}if(6===l[0]&&a.label<o[1]){a.label=o[1],o=l;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(l);break}o[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}}var i=function(e,i){return r(void 0,void 0,void 0,(function(){var r,a;return o(this,(function(o){switch(o.label){case 0:return r=e.offsetWidth,a=e.offsetHeight,[4,t(e,n({width:r,height:a,windowWidth:r,windowHeight:a,scrollX:0,scrollY:0,scale:4,useCORS:!0,allowTaint:!0,imageTimeout:3e4,onclone:function(e,t){for(var n,r,o,i,a=0,l=Array.from(t.querySelectorAll("use[href]"));a<l.length;a++){var u=l[a];o=u.getAttribute("href"),i=document.querySelector(null!=o?o:""),u.parentNode&&(r=u.parentNode),r.innerHTML=null!==(n=null==i?void 0:i.innerHTML)&&void 0!==n?n:""}e.body.style.letterSpacing="0.0001px"}},i))];case 1:return[2,o.sent()]}}))}))},a=function(t,a,l){return void 0===l&&(l={}),r(void 0,void 0,void 0,(function(){var r,u,c,s,f,d,h,p,v,y,b,w;return o(this,(function(o){switch(o.label){case 0:r=l.download,u=l.jsPDFOptions,c=l.html2canvasOptions,s=new e(n({orientation:"portrait",unit:"pt"},u)),h=a instanceof Array?a:[a],t.includes(".pdf")||(t+=".pdf"),p=0,v=h,o.label=1;case 1:return p<v.length?(y=v[p],b=y.offsetWidth,w=y.offsetHeight,s.addPage("JPEG"),[4,i(y,c)]):[3,4];case 2:f=o.sent(),d=f.toDataURL("image/jpeg",1),s.addImage(d,"JPEG",0,0,b,w),o.label=3;case 3:return p++,[3,1];case 4:return s.deletePage(1),r?[2,s.save(t,{returnPromise:!0})]:[2,s]}}))}))};export{i as html2canvas,a as html2pdf};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZXMuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IGpzUERGT3B0aW9ucyBhcyBJSnNQREZPcHRpb25zIH0gZnJvbSAnanNwZGYnXHJcbmltcG9ydCB0eXBlIHsgT3B0aW9ucyBhcyBJSHRtbDJDYW52YXNPcHRpb25zIH0gZnJvbSAnaHRtbDJjYW52YXMnXHJcbmltcG9ydCBKc1BERiBmcm9tICdqc3BkZidcclxuaW1wb3J0IGgyYyBmcm9tICdodG1sMmNhbnZhcydcclxuXHJcbi8qKlxyXG4gKiDlsIZodG1s6L2s5YyW5Li6IGNhbnZhc1xyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogIDEuIOino+WGs+S9v+eUqCA8dXNlIGhyZWY9J2lkJz4g5qC85byP5byV55So55qEc3Zn5riy5p+T6Zeu6aKYXHJcbiAqICAyLiDorr7nva7lrZfpl7Tot50sIOino+WGs+S4reaWh+aWh+Wtl+a4suafk+epuumXtOiuoeeul+WvvOiHtOeahOmHjeWPoOmXrumimFxyXG4gKlxyXG4gKiBAcGFyYW0gZWwg5b6F5riy5p+T6IqC54K5XHJcbiAqIEBwYXJhbSBvcHRpb25zIGh0bWwyY2FudmFzIOWPguaVsFxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGh0bWwyY2FudmFzID0gYXN5bmMgKFxyXG4gICAgZWw6IEhUTUxFbGVtZW50LFxyXG4gICAgb3B0aW9ucz86IFBhcnRpYWw8SUh0bWwyQ2FudmFzT3B0aW9ucz5cclxuKTogUHJvbWlzZTxIVE1MQ2FudmFzRWxlbWVudD4gPT4ge1xyXG4gICAgY29uc3QgeyBvZmZzZXRXaWR0aCwgb2Zmc2V0SGVpZ2h0IH0gPSBlbFxyXG4gICAgLy8gPiBjb252ZXJ0IGh0bWwgZWwgdG8gY2FudmFzXHJcbiAgICBjb25zdCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50ID0gYXdhaXQgaDJjKGVsLCB7XHJcbiAgICAgICAgd2lkdGg6IG9mZnNldFdpZHRoLFxyXG4gICAgICAgIGhlaWdodDogb2Zmc2V0SGVpZ2h0LFxyXG4gICAgICAgIHdpbmRvd1dpZHRoOiBvZmZzZXRXaWR0aCxcclxuICAgICAgICB3aW5kb3dIZWlnaHQ6IG9mZnNldEhlaWdodCxcclxuICAgICAgICBzY3JvbGxYOiAwLFxyXG4gICAgICAgIHNjcm9sbFk6IDAsXHJcbiAgICAgICAgc2NhbGU6IDQsXHJcbiAgICAgICAgdXNlQ09SUzogdHJ1ZSxcclxuICAgICAgICBhbGxvd1RhaW50OiB0cnVlLFxyXG4gICAgICAgIGltYWdlVGltZW91dDogMzAgKiAxMDAwLFxyXG4gICAgICAgIG9uY2xvbmUoZG9jOiBEb2N1bWVudCwgZWxlOiBFbGVtZW50KTogdm9pZCB7XHJcbiAgICAgICAgICAgIC8qIGZpeDog6Kej5Yaz5L2/55SoIDx1c2UgaHJlZj0naWQnPiDmoLzlvI/lvJXnlKjnmoRzdmfmuLLmn5Ppl67popggKi9cclxuICAgICAgICAgICAgY29uc3QgdXNlOiBBcnJheTxFbGVtZW50PiA9IEFycmF5LmZyb20oZWxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3VzZVtocmVmXScpKVxyXG4gICAgICAgICAgICAvKiogc3ZnIOWbvuaghyAqL1xyXG4gICAgICAgICAgICBsZXQgc3ZnITogSFRNTEVsZW1lbnRcclxuICAgICAgICAgICAgbGV0IGlkITogc3RyaW5nIHwgbnVsbFxyXG4gICAgICAgICAgICAvKiogc3ZnIOWGheWuueWFg+e0oCAqL1xyXG4gICAgICAgICAgICBsZXQgc3ZnU3ltYm9sITogRWxlbWVudCB8IG51bGxcclxuICAgICAgICAgICAgZm9yIChjb25zdCB1IG9mIHVzZSkge1xyXG4gICAgICAgICAgICAgICAgaWQgPSB1LmdldEF0dHJpYnV0ZSgnaHJlZicpXHJcbiAgICAgICAgICAgICAgICBzdmdTeW1ib2wgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGlkID8/ICcnKVxyXG4gICAgICAgICAgICAgICAgaWYgKHUucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN2ZyA9IHUucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3ZnLmlubmVySFRNTCA9IHN2Z1N5bWJvbD8uaW5uZXJIVE1MID8/ICcnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyogZml4OiDorr7nva7lrZfpl7Tot50sIOino+WGs+S4reaWh+aWh+Wtl+a4suafk+epuumXtOiuoeeul+WvvOiHtOeahOmHjeWPoOmXrumimCAqL1xyXG4gICAgICAgICAgICBkb2MuYm9keS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gJzAuMDAwMXB4J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLi4ub3B0aW9uc1xyXG4gICAgfSlcclxuXHJcbiAgICByZXR1cm4gY2FudmFzXHJcbn1cclxuXHJcbi8qKiDlsIYgaHRtbCDovazljJbkuLogcGRmIOW5tuS4i+i9vVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogIDEuIOW9k+S9v+eUqCBlY2hhcnQg5Zu+6KGo5pe2LCDlupTlo7DmmI7phY3nva4gYGVjaGFydHMuaW5pdCh0aGlzLiRlbCBhcyBIVE1MRGl2RWxlbWVudCwgdW5kZWZpbmVkLCB7IGRldmljZVBpeGVsUmF0aW86IDIgfSlgLCDlpITnkIbmuIXmmbDluqbpl67pophcclxuICogIDIuIOW9k+S9v+eUqOS6hiA8dXNlIGhyZWY9JyNpZCc+IOaWueW8jyjlpoI6IHN2Zy1zcHJpdGUtbG9hZGVyKSDliqDovb1zdmfotYTmupDml7YsIOW6lFxyXG4gKlxyXG4gKiBAcGFyYW0gZmlsZW5hbWUg5LiL6L295paH5Lu25ZCNXHJcbiAqIEBwYXJhbSBlbCDpnIDopoHovazljJbnmoRodG1s6IqC54K5LCDlj6/kuLrmlbDnu4RcclxuICogQHBhcmFtIG9wdGlvbnMuZG93bmxhb2Qg5piv5ZCm5LiL6L29XHJcbiAqIEBwYXJhbSBvcHRpb25zLmpzUERGT3B0aW9ucyBqc3BkZiDlj4LmlbBcclxuICogQHBhcmFtIG9wdGlvbnMuaHRtbDJjYW52YXNPcHRpb25zIGh0bWwyY2FudmFzIOWPguaVsFxyXG4gKlxyXG4gKiBAcmV0dXJucyDovazmjaLmiJDlip/lkI4sIOiHquWKqOinpuWPkeS4i+i9veaTjeS9nFxyXG4gKlxyXG4gKiBAYXV0aG9yIGxpYmluPGxpYmluQHBlcnNhZ3kuY29tPlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGh0bWwycGRmID0gYXN5bmMgKFxyXG4gICAgZmlsZW5hbWU6IHN0cmluZyxcclxuICAgIGVsOiBIVE1MRWxlbWVudCB8IEFycmF5PEhUTUxFbGVtZW50PixcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgICBkb3dubG9hZD86IGJvb2xlYW5cclxuICAgICAgICBqc1BERk9wdGlvbnM/OiBJSnNQREZPcHRpb25zXHJcbiAgICAgICAgaHRtbDJjYW52YXNPcHRpb25zPzogSUh0bWwyQ2FudmFzT3B0aW9uc1xyXG4gICAgfSA9IHt9XHJcbik6IFByb21pc2U8dm9pZCB8IEpzUERGPiA9PiB7XHJcbiAgICBjb25zdCB7IGRvd25sb2FkLCBqc1BERk9wdGlvbnMsIGh0bWwyY2FudmFzT3B0aW9ucyB9ID0gb3B0aW9uc1xyXG4gICAgLy8gQCDlrp7kvovljJYgcGRmIOWvueixoVxyXG4gICAgY29uc3QgZG9jID0gbmV3IEpzUERGKHtcclxuICAgICAgICAvKiog5pa55ZCRICovXHJcbiAgICAgICAgb3JpZW50YXRpb246ICdwb3J0cmFpdCcsXHJcbiAgICAgICAgLyoqIOWDj+e0oOWNleS9jSAqL1xyXG4gICAgICAgIHVuaXQ6ICdwdCcsXHJcbiAgICAgICAgLy8gIyDlj4LmlbDmm7/mjaJcclxuICAgICAgICAuLi5qc1BERk9wdGlvbnNcclxuICAgIH0pXHJcblxyXG4gICAgLy8gQCBjYW52YXNcclxuICAgIGxldCBjYW52YXMhOiBIVE1MQ2FudmFzRWxlbWVudFxyXG4gICAgLy8gQCBpbWFnZSdzIGJhc2U2NCBkYXRhXHJcbiAgICBsZXQgaW1hZ2UhOiBzdHJpbmdcclxuXHJcbiAgICAvLyBAIHRyYW5zZm9ybSB0byBhcnJheSBlbGVtZW50J3NcclxuICAgIGNvbnN0IGVsczogQXJyYXk8SFRNTEVsZW1lbnQ+ID0gZWwgaW5zdGFuY2VvZiBBcnJheSA/IGVsIDogW2VsXVxyXG5cclxuICAgIC8vID8g5qOA5p+l5bm26KGl5YWo5paH5Lu25ZCNXHJcbiAgICBpZiAoIWZpbGVuYW1lLmluY2x1ZGVzKCcucGRmJykpIGZpbGVuYW1lICs9ICcucGRmJ1xyXG4gICAgLy8gPiDop6PmnpAsIOi9rOWMluS4unBkZlxyXG4gICAgZm9yIChjb25zdCBlbCBvZiBlbHMpIHtcclxuICAgICAgICBjb25zdCB7IG9mZnNldFdpZHRoLCBvZmZzZXRIZWlnaHQgfSA9IGVsXHJcbiAgICAgICAgLy8gPiDmt7vliqDmlrDpobVcclxuICAgICAgICBkb2MuYWRkUGFnZSgnSlBFRycpXHJcbiAgICAgICAgLy8gPiB0cmFuc2Zvcm0gZWwgdG8gY2FudmFzXHJcbiAgICAgICAgY2FudmFzID0gYXdhaXQgaHRtbDJjYW52YXMoZWwsIGh0bWwyY2FudmFzT3B0aW9ucylcclxuICAgICAgICAvLyA+IHRyYW5zZm9ybSBjYW52YXMgdG8gaW1hZ2UoanBnKVxyXG4gICAgICAgIGltYWdlID0gY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvanBlZycsIDEuMClcclxuICAgICAgICAvLyA+IGFwcGVuZCB0byBwZGYncyBkb2NcclxuICAgICAgICBkb2MuYWRkSW1hZ2UoaW1hZ2UsICdKUEVHJywgMCwgMCwgb2Zmc2V0V2lkdGgsIG9mZnNldEhlaWdodClcclxuICAgIH1cclxuICAgIC8vID4g5Yig6Zmk56m66aG16Z2iXHJcbiAgICBkb2MuZGVsZXRlUGFnZSgxKVxyXG4gICAgaWYgKGRvd25sb2FkKSB7XHJcbiAgICAgICAgLy8gPiDop6blj5Hkv53lrZjkuIvovb1cclxuICAgICAgICByZXR1cm4gZG9jLnNhdmUoZmlsZW5hbWUsIHsgcmV0dXJuUHJvbWlzZTogdHJ1ZSB9KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZG9jXHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbImh0bWwyY2FudmFzIiwiZWwiLCJvcHRpb25zIiwiX19hd2FpdGVyIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJoMmMiLCJfX2Fzc2lnbiIsIndpZHRoIiwiaGVpZ2h0Iiwid2luZG93V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJzY3JvbGxYIiwic2Nyb2xsWSIsInNjYWxlIiwidXNlQ09SUyIsImFsbG93VGFpbnQiLCJpbWFnZVRpbWVvdXQiLCJvbmNsb25lIiwiZG9jIiwiZWxlIiwic3ZnIiwiaWQiLCJzdmdTeW1ib2wiLCJ1c2VfMSIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfaSIsImxlbmd0aCIsInUiLCJnZXRBdHRyaWJ1dGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwYXJlbnROb2RlIiwiaW5uZXJIVE1MIiwiX2EiLCJib2R5Iiwic3R5bGUiLCJsZXR0ZXJTcGFjaW5nIiwic2VudCIsImh0bWwycGRmIiwiZmlsZW5hbWUiLCJkb3dubG9hZCIsImpzUERGT3B0aW9ucyIsImh0bWwyY2FudmFzT3B0aW9ucyIsIkpzUERGIiwib3JpZW50YXRpb24iLCJ1bml0IiwiZWxzIiwiaW5jbHVkZXMiLCJlbHNfMSIsImVsXzEiLCJhZGRQYWdlIiwiY2FudmFzIiwiaW1hZ2UiLCJ0b0RhdGFVUkwiLCJhZGRJbWFnZSIsImRlbGV0ZVBhZ2UiLCJzYXZlIiwicmV0dXJuUHJvbWlzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O29tREFnQmEsSUFBQUEsRUFBYyxTQUN2QkMsRUFDQUMsR0FBc0MsT0FBQUMsT0FBQSxPQUFBLE9BQUEsR0FBQSxxRUFJSixPQUYxQkMsRUFBOEJILEVBQW5CRyxZQUFFQyxFQUFpQkosZUFFRSxDQUFBLEVBQUFLLEVBQUlMLEVBQUVNLEVBQUEsQ0FDMUNDLE1BQU9KLEVBQ1BLLE9BQVFKLEVBQ1JLLFlBQWFOLEVBQ2JPLGFBQWNOLEVBQ2RPLFFBQVMsRUFDVEMsUUFBUyxFQUNUQyxNQUFPLEVBQ1BDLFNBQVMsRUFDVEMsWUFBWSxFQUNaQyxhQUFjLElBQ2RDLFFBQU8sU0FBQ0MsRUFBZUMsR0FRbkIsVUFKSUMsRUFDQUMsRUFFQUMsTUFDWUMsRUFOWUMsTUFBTUMsS0FBS04sRUFBSU8saUJBQWlCLGNBTTVDQyxFQUFHSixFQUFBSyxPQUFIRCxJQUFLLENBQWhCLElBQU1FLEVBQUNOLEVBQUFJLEdBQ1JOLEVBQUtRLEVBQUVDLGFBQWEsUUFDcEJSLEVBQVlTLFNBQVNDLGNBQWNYLFFBQUFBLEVBQU0sSUFDckNRLEVBQUVJLGFBQ0ZiLEVBQU1TLEVBQUVJLFlBRVpiLEVBQUljLFVBQWdDLFFBQXBCQyxFQUFBYixhQUFTLEVBQVRBLEVBQVdZLGlCQUFTLElBQUFDLEVBQUFBLEVBQUksRUFDM0MsQ0FFRGpCLEVBQUlrQixLQUFLQyxNQUFNQyxjQUFnQixhQUVoQ3JDLFlBR1AsTUFBQSxDQUFBLEVBakNrQ2tDLEVBK0JoQ0ksY0FHTCxFQWtCWUMsRUFBVyxTQUNwQkMsRUFDQXpDLEVBQ0FDLGVBQUEsSUFBQUEsSUFBQUEsRUFJTSxDQUFBLG9IQUVFeUMsRUFBK0N6QyxFQUF2Q3lDLFNBQUVDLEVBQXFDMUMsRUFBTzBDLGFBQTlCQyxFQUF1QjNDLHFCQUVqRGlCLEVBQU0sSUFBSTJCLEVBQUt2QyxFQUFBLENBRWpCd0MsWUFBYSxXQUViQyxLQUFNLE1BRUhKLElBU0RLLEVBQTBCaEQsYUFBY3dCLE1BQVF4QixFQUFLLENBQUNBLEdBR3ZEeUMsRUFBU1EsU0FBUyxVQUFTUixHQUFZLFFBRXhCZCxFQUFBLEVBQUh1QixFQUFHRixtQkFBSCxPQUFBckIsWUFBWndCLEVBQUFELEVBQUF2QixHQUNPeEIsRUFBOEJnRCxFQUFuQmhELFlBQUVDLEVBQWlCK0MsZUFFdENqQyxFQUFJa0MsUUFBUSxRQUVILENBQUEsRUFBTXJELEVBQVlvRCxFQUFJUCxLQUxmLENBQUEsRUFBQSxVQUtoQlMsRUFBU2xCLFNBRVRtQixFQUFRRCxFQUFPRSxVQUFVLGFBQWMsR0FFdkNyQyxFQUFJc0MsU0FBU0YsRUFBTyxPQUFRLEVBQUcsRUFBR25ELEVBQWFDLDJCQVRsQ3VCLGlCQWFqQixPQURBVCxFQUFJdUMsV0FBVyxHQUNYZixFQUVBLENBQUEsRUFBT3hCLEVBQUl3QyxLQUFLakIsRUFBVSxDQUFFa0IsZUFBZSxLQUUzQyxDQUFBLEVBQU96QyJ9
